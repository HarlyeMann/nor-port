@model SolutionNorSolutionPort.BusinessLogicLayer.CrudeDefaultIssueContract

@{
    ViewBag.Title = "Create Default Issue new";
}

<h2>Create Default Issue new</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr/>
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        @Html.HiddenFor(model => model.DefaultIssueId)
        @Html.HiddenFor(model => model.DefaultUserId)
        @Html.HiddenFor(model => model.DateTime)

        <div class="form-group">
            @Html.Label("Default Issue Type", new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownList("DefaultIssueTypeRcd", null, new {@class = "form-control"})
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Default Issue Status", new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownList("DefaultIssueStatusRcd", null, new {@class = "form-control"})
            </div>
        </div>

        @if (ViewBag.DefaultErrorId != null)
        {
            <div class="form-group">
                @Html.Label("Default Error Id", new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.DropDownList("DefaultErrorId", null, new {@class = "form-control"})
                </div>
            </div>
        }

        <div class="form-group">
            @Html.Label("Issue Name", new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.IssueName, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.IssueName, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Issue Description", new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.IssueDescription, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.IssueDescription, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Steps To Reproduce", new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.StepsToReproduce, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.StepsToReproduce, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Link", new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Link, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Link, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn-primary"/>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Styles.Render("~/Content/themes/base/all.css")
    <script type="text/javascript">
        $(function() {
            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker(({ dateFormat: "yy-mm-dd" }));
        })
    </script>
}
