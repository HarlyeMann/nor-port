@model SolutionNorSolutionPort.AspMvc.Controllers.BookingFinancialPaymentContract

@{
    ViewBag.Title = "BookingPayments";
}

<h2>
    Booking Payments ( @Html.Raw(Model.Locator) 
    @if (@Model.BookingContract.BookingEventCount.ConfirmedFlag == 0) {
        @Html.Raw("- Booking Not Confirmed")
    }
)
</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.Partial("_tab")

        <br />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.BookingBalanceAmount)
        @Html.HiddenFor(model => model.BookingBalanceFinancialCurrencyId)
        @Html.HiddenFor(model => model.PaymentAmount)
        @Html.HiddenFor(model => model.PaymentFinancialPaymentTypeRcd)
        @Html.HiddenFor(model => model.PaymentBookingCurrencyAmount)
        @Html.HiddenFor(model => model.PaymentFinancialCostcentreId)

        <table class="table">
            <tr>
                <th>Nr</th>
                <th>Date Time</th>
                <th>Type</th>
                <th align="right">Paid</th>
                <th>Currency</th>
                <th align="right">Exchange</th>
                <th align="right">Amount</th>
                <th>Type</th>
                <th>Description</th>
                <th>Costcentre</th>
                <th>User</th>
                <th></th>
            </tr>

            @foreach (var item in Model.Payments) {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.TransactionNumber) </td>
                    <td>@Html.DisplayFor(modelItem => item.DateTime) </td>
                    <td>@Html.DisplayFor(modelItem => item.FinancialPaymentTypeName) </td>
                    <td align="right">@Html.DisplayFor(modelItem => item.PaidCurrencyAmount) </td>
                    <td>@Html.DisplayFor(modelItem => item.PaidCurrencyType) </td>
                    <td align="right">@Html.DisplayFor(modelItem => item.ExchangeRate) </td>
                    <td align="right">@Html.DisplayFor(modelItem => item.BookingCurrencyAmount) </td>
                    <td>@Html.DisplayFor(modelItem => item.BookingCurrencyType) </td>
                    <td>@Html.DisplayFor(modelItem => item.PaymentDescription) </td>
                    <td>@Html.DisplayFor(modelItem => item.FinancialCostcentreName) </td>
                    <td>@Html.DisplayFor(modelItem => item.DefaultUserName) </td>
                    
                    @if (item.FinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Card)) { 
                        <td>@Html.ActionLink("Edit", "CrudeFinancialPaymentCardEdit", "CrudeFinancialPaymentCard", new { financialPaymentCardId = item.FinancialPaymentId, financialCurrencyId = Model.PaymentFinancialCurrencyId  }, null)</td>
                        <td>@Html.ActionLink("Details", "CrudeFinancialPaymentCardDetails", "CrudeFinancialPaymentCard", new { financialPaymentCardId = item.FinancialPaymentId  }, null)</td>
                        <td>@Html.ActionLink("Direct", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Card, financialPaymentId = item.FinancialPaymentId, financialCurrencyId = Guid.Empty }, null) </td>
                    } else if (item.FinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Cash)) {
                        <td>@Html.ActionLink("Edit", "CrudeFinancialPaymentCashEdit", "CrudeFinancialPaymentCash", new { financialPaymentCashId = item.FinancialPaymentId }, null)</td>
                        <td>@Html.ActionLink("Details", "CrudeFinancialPaymentCashDetails", "CrudeFinancialPaymentCash", new { financialPaymentCashId = item.FinancialPaymentId  }, null)</td>
                        <td>@Html.ActionLink("Direct", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Cash, financialPaymentId = item.FinancialPaymentId, financialCurrencyId = Guid.Empty }, null) </td>
                    } else if (item.FinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Bank)) {
                        <td>@Html.ActionLink("Edit", "CrudeFinancialPaymentBankEdit", "CrudeFinancialPaymentBank", new { financialPaymentBankId = item.FinancialPaymentId  }, null)</td>
                        <td>@Html.ActionLink("Details", "CrudeFinancialPaymentBankDetails", "CrudeFinancialPaymentBank", new { financialPaymentBankId = item.FinancialPaymentId  }, null)</td>
                        <td>@Html.ActionLink("Direct", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Bank, financialPaymentId = item.FinancialPaymentId, financialCurrencyId = Guid.Empty }, null) </td>
                    }

                </tr>
            }
        </table>

        <hr />

        <div class="form-group">
            <div class="form-group">
                @Html.Label("Balance", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayText("BookingBalanceAmount")
                    @Html.DisplayText("BookingBalanceFinancialCurrencyName")
                </div>
            </div>

            @if (Model.BookingBalanceAmount != 0) { 
                <div class="form-group">
                    @Html.Label("Add Payment in", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("PaymentSelectedFinancialCurrencyId", null, htmlAttributes: new { @class = "form-control", @style = "display:inline-block;width:325px" })
                        <input type="submit" value="Recalc" class="btn-primary" />
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Converted", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DisplayText("PaymentAmount")
                        @Html.DisplayText("PaymentFinancialCurrencyName")
                    </div>
                </div>
            }
        </div>

        <div>
            @if (Model.PaymentFinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Card)) {
                <b>@Html.ActionLink("Card", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Card, financialPaymentId = Guid.Empty, financialCurrencyId = Model.PaymentFinancialCurrencyId }, null)</b>
            } else {
                @Html.ActionLink("Card", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Card, financialPaymentId = Guid.Empty, financialCurrencyId = Model.PaymentFinancialCurrencyId }, null)
            } |

            @if (Model.PaymentFinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Cash)) {
                <b>@Html.ActionLink("Cash", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Cash, financialPaymentId = Guid.Empty, financialCurrencyId = Model.PaymentFinancialCurrencyId }, null)</b>
            } else {
                @Html.ActionLink("Cash", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Cash, financialPaymentId = Guid.Empty, financialCurrencyId = Model.PaymentFinancialCurrencyId }, null)
            } |

            @if (Model.PaymentFinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Voucher)) {
                <b>@Html.ActionLink("Voucher", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Voucher, financialPaymentId = Guid.Empty, financialCurrencyId = Model.PaymentFinancialCurrencyId }, null) </b>
            } else {
                @Html.ActionLink("Voucher", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Voucher, financialPaymentId = Guid.Empty, financialCurrencyId = Model.PaymentFinancialCurrencyId }, null)
            } |

            @if (Model.PaymentFinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Bank)) {
                <b>@Html.ActionLink("Bank", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Bank, financialPaymentId = Guid.Empty, financialCurrencyId = Model.PaymentFinancialCurrencyId }, null)</b>
            } else {
                @Html.ActionLink("Bank", "BookingFinancialPayments", "Booking", new { bookingId = Model.BookingId, financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Bank, financialPaymentId = Guid.Empty, financialCurrencyId = Model.PaymentFinancialCurrencyId }, null)
            }
        </div>

        <br />
      
        @if (Model.PaymentFinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Card)) {
            // card
            <div class="form-group">
                @Html.Label("Card Type", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("FinancialCardTypeRcd", null, htmlAttributes: new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Name On Card", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CardContract.NameOnCard, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CardContract.NameOnCard, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Card Number", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CardContract.CardNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CardContract.CardNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Card Verification Value", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CardContract.CardVerificationValue, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CardContract.CardVerificationValue, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Address Verification Code", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CardContract.AddressVerificationCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CardContract.AddressVerificationCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Issued Year", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CardContract.IssuedYear, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CardContract.IssuedYear, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Issued Month", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CardContract.IssuedMonth, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CardContract.IssuedMonth, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Expiry Year", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CardContract.ExpiryYear, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CardContract.ExpiryYear, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Expiry Month", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CardContract.ExpiryMonth, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CardContract.ExpiryMonth, "", new { @class = "text-danger" })
                </div>
            </div>

        } else if (Model.PaymentFinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Cash)) {
            // cash

        } else if (Model.PaymentFinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Voucher)) {
            // voucher
            <table class="table">
                <tr>
                    <th>Voucher Number</th>
                    <th>Voucher Description</th>
                    <th>Remaining Amount</th>
                    <th>Financial Currency Type Name</th>
                    <th>Valid From Date Time</th>
                    <th>Valid Until Date Time</th>
                    <th></th>
                </tr>

                @foreach (var item in Model.Vouchers) {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.VoucherNumber) </td>
                        <td>@Html.DisplayFor(modelItem => item.VoucherDescription) </td>
                        <td>@Html.DisplayFor(modelItem => item.RemainingAmount) </td>
                        <td>@Html.DisplayFor(modelItem => item.FinancialCurrencyTypeName) </td>
                        <td>@Html.DisplayFor(modelItem => item.ValidFromDateTime) </td>
                        <td>@Html.DisplayFor(modelItem => item.ValidUntilDateTime) </td>
                        <td>
                            @Html.ActionLink(   "Use", 
                                                "BookingFinancialPayments", 
                                                "Booking", 
                                                new {   bookingId = Model.BookingId, 
                                                        financialPaymentTypeRcd = SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Voucher,
                                                        financialVoucherId = item.FinancialVoucherId
                                                    }, 
                                                null)
                        </td>
                    </tr>
                }
            </table>

        } else if (Model.PaymentFinancialPaymentTypeRcd.Contains(SolutionNorSolutionPort.BusinessLogicLayer.FinancialPaymentTypeRef.Bank)) {
            // bank
            <div class="form-group">
                @Html.Label("Financial Bank Account Number Type", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("FinancialBankAccountNumberTypeRcd", null, htmlAttributes: new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Bank Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BankContract.BankName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BankContract.BankName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Bank Account", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BankContract.BankAccount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BankContract.BankAccount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Bank Number", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BankContract.BankNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BankContract.BankNumber, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Add Payment" class="btn-primary"/>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Styles.Render("~/Content/themes/base/all.css")
    <script type="text/javascript">
        $(function () {
            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker(({ dateFormat: "yy-mm-dd" }));
        })
    </script>
}
